#!/usr/bin/env python3
"""
Alembic Migration Demonstration Script for Pulse AI

This script demonstrates how to use Alembic to create and apply a sample migration.
It is for DEMONSTRATION PURPOSES ONLY and should not be used in production.

The script shows the complete workflow of:
1. Creating a new Alembic migration
2. Modifying the generated migration file with appropriate upgrade/downgrade logic
3. Applying the migration to add a sample field to a table
4. Checking the current database revision
5. Optionally reverting the migration

This serves as a reference implementation to help new team members understand
the database migration workflow. The changes made by this demonstration script
are not required by the actual application.

Usage:
    # Run the full demonstration
    python3 test_migration.py
    
    # Revert the demonstration changes after running
    python3 test_migration.py --revert

Requirements:
    - Alembic must be installed and configured
    - Database must exist and be accessible
    - User must have permissions to modify the database schema
"""

import os
import sys
import subprocess
from pathlib import Path


def create_migration():
    """Create a new migration that adds a demonstration column to a table."""
    print("\n===== DEMONSTRATION: Creating a Sample Migration =====")
    print("This is a DEMONSTRATION of how to create a migration.")
    print("The changes are not required for the actual application.\n")
    
    print("Creating a new migration to add a sample field...")
    result = subprocess.run(
        ["alembic", "revision", "--autogenerate", "-m", "DEMO Add sample field"],
        capture_output=True,
        text=True
    )
    
    if result.returncode != 0:
        print(f"Error creating migration: {result.stderr}")
        return False, None
    
    # Get the latest migration file
    migrations_dir = Path("migrations/versions")
    migration_files = sorted(migrations_dir.glob("*.py"), key=os.path.getmtime)
    
    if not migration_files:
        print("No migration files found.")
        return False, None
    
    latest_migration = migration_files[-1]
    print(f"Created migration: {latest_migration}")
    
    # Modify the migration file to add a column
    with open(latest_migration, "r") as f:
        content = f.read()
    
    # Add a comment at the top indicating this is a demonstration
    content = content.replace(
        '"""DEMO Add sample field',
        '"""DEMONSTRATION ONLY: Add sample field\n\nThis migration is for demonstration purposes only and not required by the application.'
    )
    
    # Replace the empty upgrade function
    upgrade_func = """def upgrade() -> None:
    \"\"\"Add a demonstration column to the employees table.
    
    This is for educational purposes only to demonstrate migration capabilities.
    The column is not used by the actual application.
    \"\"\"
    # Add a demonstration 'notes' column to the employees table
    op.add_column('employees', sa.Column('demo_notes', sa.Text(), nullable=True))
"""
    
    content = content.replace(
        "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass",
        upgrade_func
    )
    
    # Replace the empty downgrade function
    downgrade_func = """def downgrade() -> None:
    \"\"\"Remove the demonstration column from the employees table.\"\"\"
    # Remove the demonstration column from the employees table
    op.drop_column('employees', 'demo_notes')
"""
    
    content = content.replace(
        "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass",
        downgrade_func
    )
    
    with open(latest_migration, "w") as f:
        f.write(content)
    
    print("Migration file updated with demonstration column addition.")
    return True, latest_migration


def apply_migration():
    """Apply the migration to the database."""
    print("\n===== DEMONSTRATION: Applying a Migration =====")
    print("Applying migration...")
    result = subprocess.run(
        ["alembic", "upgrade", "head"],
        capture_output=True,
        text=True
    )
    
    if result.returncode != 0:
        print(f"Error applying migration: {result.stderr}")
        return False
    
    print("Migration applied successfully.")
    return True


def check_current_revision():
    """Check the current database revision."""
    print("\n===== DEMONSTRATION: Checking Migration Status =====")
    print("Checking current database revision...")
    result = subprocess.run(
        ["alembic", "current"],
        capture_output=True,
        text=True
    )
    
    if result.returncode != 0:
        print(f"Error checking revision: {result.stderr}")
        return False
    
    print(f"Current revision: {result.stdout}")
    return True


def revert_migration():
    """Revert the demonstration migration."""
    print("\n===== DEMONSTRATION: Reverting a Migration =====")
    print("Reverting the demonstration migration...")
    result = subprocess.run(
        ["alembic", "downgrade", "-1"],
        capture_output=True,
        text=True
    )
    
    if result.returncode != 0:
        print(f"Error reverting migration: {result.stderr}")
        return False
    
    print("Migration reverted successfully.")
    return True


def check_database_schema():
    """Check if the demonstration column exists in the employees table."""
    print("\n===== DEMONSTRATION: Verifying Database Schema =====")
    try:
        from src.db.models import get_engine
        from sqlalchemy import inspect
        
        inspector = inspect(get_engine())
        columns = [col['name'] for col in inspector.get_columns('employees')]
        
        if 'demo_notes' in columns:
            print("Verification: The 'demo_notes' column was successfully added to the employees table.")
        else:
            print("Verification: The 'demo_notes' column is not present in the employees table.")
        
        return True
    except Exception as e:
        print(f"Error checking database schema: {e}")
        return False


if __name__ == "__main__":
    print("=" * 80)
    print("ALEMBIC MIGRATION DEMONSTRATION".center(80))
    print("This script demonstrates the database migration workflow for educational purposes.")
    print("=" * 80)
    
    # Check if we should revert an existing migration
    if len(sys.argv) > 1 and sys.argv[1] == "--revert":
        if revert_migration():
            check_current_revision()
            print("\nDemonstration migration reverted successfully!")
        else:
            print("\nFailed to revert demonstration migration.")
        sys.exit(0)
    
    success, migration_file = create_migration()
    if success and apply_migration():
        check_current_revision()
        check_database_schema()
        
        print("\n" + "=" * 80)
        print("DEMONSTRATION COMPLETED SUCCESSFULLY!".center(80))
        print("The demonstration migration has been applied to your database.".center(80))
        print("=" * 80)
        print("\nIMPORTANT: This was a demonstration only. The 'demo_notes' column")
        print("added to the employees table is not used by the application.")
        print("\nTo revert this demonstration migration, run:")
        print("  python3 test_migration.py --revert")
        print("\nOr manually with:")
        print("  alembic downgrade -1")
    else:
        print("\nDemonstration failed. See error messages above.")